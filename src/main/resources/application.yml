#  docker run -d --name redis -p 6379:6379 redis redis-server --save 20 1 --loglevel warning --requirepass 12345
#  docker run -d -p 9000:9000 -p 9001:9001 --name minio minio/minio server /data --console-address ":9001"

#  docker run -d --name redis -p 6379:6379 -p 8001:8001 redislabs/redis:latest --requirepass your_password

link:
  count-of-random-url-characters: ${COUNT_OF_RANDOM_URL_CHARACTERS}

jwt:
  secret-key: ${JWT_SECRET}
  jwt-expiration: ${JWT_ACCESS_EXPIRATION}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION}

token:
  verify-email-expiration: ${VERIFY_EMAIL_EXPIRATION}
  reset-password-expiration: ${RESET_PASSWORD_EXPIRATION}

cache:
  link-cache-name: ${LINK_CACHE_NAME}
  link-cache-ttl-in-seconds: ${LINK_CACHE_TTL_IN_SECONDS}

  redirect-cache-name: ${REDIRECT_CACHE_NAME}
  redirect-cache-ttl-in-seconds: ${REDIRECT_CACHE_TTL_IN_SECONDS}

  user-cache-name: ${USER_CACHE_NAME}
  user-cache-ttl-in-seconds: ${USER_CACHE_TTL_IN_SECONDS}

  image-cache-name: ${IMAGE_CACHE_NAME}
  image-cache-ttl-in-seconds: ${IMAGE_CACHE_TTL_IN_SECONDS}


server:
  error:
    include-message: always
    include-binding-errors: always
    include-exception: true
  port: ${APPLICATION_PORT}

springdoc:
  swagger-ui:
    path: /swagger/ui

minio:
  url: ${MINIO_PROTOCOL}://${MINIO_HOST}:${MINIO_PORT}
  username: ${MINIO_USERNAME}
  password: ${MINIO_PASSWORD}
  bucket: ${MINIO_BUCKET}


spring:
  config:
    import: optional:file:.env[.properties]

  profiles:
    active:
      #      - test
#      - prod
      - dev

  cache:
    type: redis
    cache-names: redis-cache

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}


  servlet:
    multipart:
      max-file-size: ${MULTIPART_MAX_FILE_SIZE}
      max-request-size: ${MULTIPART_MAX_REQUEST_SIZE}

  datasource:
#    url: jdbc:postgresql://postgres:${POSTGRES_PORT}/${POSTGRES_DATABASE}?currentSchema=${POSTGRES_SCHEMA}
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}?currentSchema=${POSTGRES_SCHEMA}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver

  #  devtools:
  #    restart:
  #      additional-paths: src/main/java/com/shortlink/webapp
  #      enabled: false

  mail:
    host: ${SPRING_MAIL_HOST}
#    host: smtp.gmail.com
    port: ${SPRING_MAIL_PORT}
    username: ${SPRING_MAIL_USERNAME}
    password: ${SPRING_MAIL_PASSWORD}

    properties:
      mail:
        debug: true
        smtp:
          auth: true
          starttls:
            enable: true

  liquibase:
    enabled: true
    change-log: db/changelog/db.changelog-master.yml
    default-schema: ${POSTGRES_SCHEMA}

  jpa:
    open-in-view: false
    database: postgresql

    properties:
      hibernate:
        show_sql: true
        format_sql: true
        hbm2ddl.auto: validate
        fetch_size: 50
        batch_size: 50
        default_schema: ${POSTGRES_SCHEMA}

      org:
        hibernate:
          envers:
            store_data_at_delete: true
            audit_table_suffix: _audit
            revision_field_name: revision_id

logging:
  level:
    org.springframework.cache: TRACE
    org.springframework.data.redis: TRACE


#logging:
#  level:
#    root: info
#    sql: info

#logging:
#  level:
#    root: INFO
#    org:
#      springframework:
#        data:
#          redis:
#            cache:
#              RedisCacheManager: TRACE
#            core:
#              RedisTemplate: TRACE